PROJECT(EdelApp CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)

# set project information
SET(PROJECT_VERSION_MAJOR "0")
SET(PROJECT_VERSION_MINOR "2")
SET(PROJECT_VERSION_PATCH "0")
SET(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}")
SET(PROJECT_VENDOR "Edeltech")
SET(PROJECT_COPYRIGHT_YEAR "2015")
SET(PROJECT_DOMAIN "edeltech.ch")

# define some variables
STRING(TOLOWER ${PROJECT_NAME} PROJECT_NAME_LOWERCASE)
SET(EDEL_LIBRARIES_DIR "${CMAKE_SOURCE_DIR}/src/libs")

# define a macro to get a list of subdirectory
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
        SET(dirlist ${dirlist} ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

# set the output paths
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

# set build type to Debug is not specified
IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Debug" CACHE STRING "" FORCE)
ENDIF()

# automatically include the source and build directories in the include path
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

# automatically handle moc files
SET(CMAKE_AUTOMOC ON)
SET(CMAKE_VERBOSE_MAKEFILE ON)

# find Qt5 packages
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Multimedia REQUIRED)
FIND_PACKAGE(Qt5MultimediaWidgets REQUIRED)
FIND_PACKAGE(Qt5Qml REQUIRED)
FIND_PACKAGE(Qt5Test REQUIRED)

# find corefoundation framework
IF(APPLE)
    FIND_LIBRARY(COREFOUNDATION_FRAMEWORK CoreFoundation)
ENDIF()

MESSAGE(STATUS "Building ${PROJECT_NAME} in ${CMAKE_BUILD_TYPE} mode")

# enable unit tests
ENABLE_TESTING()
SET(TEST_LINK_LIBRARIES Qt5::Test)

# emulate 'make check'
ADD_CUSTOM_TARGET(check COMMAND ${CMAKE_CTEST_COMMAND})

# define project version (NOTE: replace with config.h.cmake ?)
ADD_DEFINITIONS(-DPROJECT_VERSION=\"${PROJECT_VERSION}\")

# define install directories
IF(UNIX AND NOT APPLE)
    SET(BIN_INSTALL_DIR "bin")
    SET(DOC_INSTALL_DIR "share/doc/${PROJECT_NAME_LOWERCASE}/")
ELSE()
    SET(BIN_INSTALL_DIR ".")
    SET(DOC_INSTALL_DIR ".")
ENDIF()

# enable @rpath in the install name for any shared library being built
SET(CMAKE_MACOSX_RPATH ON)

# add src files directory
ADD_SUBDIRECTORY(src)

# packaging using cpack
IF(APPLE)
    SET(CMAKE_INSTALL_PREFIX "/Applications")
ENDIF()

MESSAGE(STATUS "${PROJECT_NAME} will be installed to ${CMAKE_INSTALL_PREFIX}")


# define CPack variables (NOTE: Do this is a separte .cmake file)
SET(CPACK_GENERATOR "TBZ2")
SET(CPACK_PACKAGE_VERSION_MAJOR "${PROJECT_VERSION_MAJOR}")
SET(CPACK_PACKAGE_VERSION_MINOR "${PROJECT_VERSION_MINOR}")
SET(CPACK_PACKAGE_VERSION_PATCH "${PROJECT_VERSION_PATCH}")
SET(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
SET(CPACK_PACKAGE_VENDOR "${PROJECT_VENDOR}")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/${README_FILE}")
IF(WIN32)
    SET(CPACK_GENERATOR "NSIS")
    SET(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME}" "${PROJECT_NAME}")
    SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")
    SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME} ${PROJECT_VERSION}")
    SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/${LICENSE_FILE}")
    SET(CPACK_NSIS_EXECUTABLES_DIRECTORY "${BIN_INSTALL_DIR}")
    SET(CPACK_NSIS_MUI_ICON "${PROJECT_ICONS_DIRECTORY}/NSIS.ico")
    SET(CPACK_PACKAGE_ICON "${PROJECT_ICONS_DIRECTORY}\\\\NSISHeader.bmp")
    SET(CPACK_NSIS_URL_INFO_ABOUT "http://${PROJECT_DOMAIN}")
    SET(CPACK_NSIS_INSTALLED_ICON_NAME "${PROJECT_NAME}${CMAKE_EXECUTABLE_SUFFIX}")
    SET(CPACK_NSIS_MENU_LINKS "${LICENSE_FILE}" "License" "${README_FILE}" "Readme")
    SET(CPACK_NSIS_MUI_FINISHPAGE_RUN "${CPACK_NSIS_INSTALLED_ICON_NAME}")
ELSEIF(APPLE)
     SET(CPACK_GENERATOR "DragNDrop")
     SET(CPACK_DMG_FORMAT "UDBZ")
     SET(CPACK_DMG_VOLUME_NAME "${PROJECT_NAME}")
     SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}")
     # SET(CPACK_PACKAGE_ICON "${ICONS_DIR}/DMG.icns")
     # SET(CPACK_DMG_DS_STORE "${ICONS_DIR}/DMGDSStore")
     # SET(CPACK_DMG_BACKGROUND_IMAGE "${ICONS_DIR}/DMGBackground.png")
ELSEIF(UNIX)
    SET(CPACK_SYSTEM_NAME "${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
ENDIF()

INCLUDE(CPack)

# install MSVC redistributables and files listed in CMAKE_INSTALL_DEBUG_LIBRARIES
SET(CMAKE_INSTALL_SYSTEM_RUNTIME_DESTINATION "${BIN_INSTALL_DIR}")
INCLUDE(InstallRequiredSystemLibraries)

